// Code generated by MockGen. DO NOT EDIT.
// Source: presentation/protobuf/photos.pb.go

// Package protobuf is a generated GoMock package.
package protobuf

import (
	gomock "github.com/golang/mock/gomock"
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
	reflect "reflect"
)

// MockPhotoServiceClient is a mock of PhotoServiceClient interface
type MockPhotoServiceClient struct {
	ctrl     *gomock.Controller
	recorder *MockPhotoServiceClientMockRecorder
}

// MockPhotoServiceClientMockRecorder is the mock recorder for MockPhotoServiceClient
type MockPhotoServiceClientMockRecorder struct {
	mock *MockPhotoServiceClient
}

// NewMockPhotoServiceClient creates a new mock instance
func NewMockPhotoServiceClient(ctrl *gomock.Controller) *MockPhotoServiceClient {
	mock := &MockPhotoServiceClient{ctrl: ctrl}
	mock.recorder = &MockPhotoServiceClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockPhotoServiceClient) EXPECT() *MockPhotoServiceClientMockRecorder {
	return m.recorder
}

// Create mocks base method
func (m *MockPhotoServiceClient) Create(ctx context.Context, in *Photo, opts ...grpc.CallOption) (*Id, error) {
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Create", varargs...)
	ret0, _ := ret[0].(*Id)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create
func (mr *MockPhotoServiceClientMockRecorder) Create(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockPhotoServiceClient)(nil).Create), varargs...)
}

// Update mocks base method
func (m *MockPhotoServiceClient) Update(ctx context.Context, in *Photo, opts ...grpc.CallOption) (*Empty, error) {
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Update", varargs...)
	ret0, _ := ret[0].(*Empty)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Update indicates an expected call of Update
func (mr *MockPhotoServiceClientMockRecorder) Update(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockPhotoServiceClient)(nil).Update), varargs...)
}

// Read mocks base method
func (m *MockPhotoServiceClient) Read(ctx context.Context, in *Id, opts ...grpc.CallOption) (*Photo, error) {
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Read", varargs...)
	ret0, _ := ret[0].(*Photo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Read indicates an expected call of Read
func (mr *MockPhotoServiceClientMockRecorder) Read(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Read", reflect.TypeOf((*MockPhotoServiceClient)(nil).Read), varargs...)
}

// Delete mocks base method
func (m *MockPhotoServiceClient) Delete(ctx context.Context, in *Id, opts ...grpc.CallOption) (*Empty, error) {
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Delete", varargs...)
	ret0, _ := ret[0].(*Empty)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Delete indicates an expected call of Delete
func (mr *MockPhotoServiceClientMockRecorder) Delete(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockPhotoServiceClient)(nil).Delete), varargs...)
}

// MockPhotoServiceServer is a mock of PhotoServiceServer interface
type MockPhotoServiceServer struct {
	ctrl     *gomock.Controller
	recorder *MockPhotoServiceServerMockRecorder
}

// MockPhotoServiceServerMockRecorder is the mock recorder for MockPhotoServiceServer
type MockPhotoServiceServerMockRecorder struct {
	mock *MockPhotoServiceServer
}

// NewMockPhotoServiceServer creates a new mock instance
func NewMockPhotoServiceServer(ctrl *gomock.Controller) *MockPhotoServiceServer {
	mock := &MockPhotoServiceServer{ctrl: ctrl}
	mock.recorder = &MockPhotoServiceServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockPhotoServiceServer) EXPECT() *MockPhotoServiceServerMockRecorder {
	return m.recorder
}

// Create mocks base method
func (m *MockPhotoServiceServer) Create(arg0 context.Context, arg1 *Photo) (*Id, error) {
	ret := m.ctrl.Call(m, "Create", arg0, arg1)
	ret0, _ := ret[0].(*Id)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create
func (mr *MockPhotoServiceServerMockRecorder) Create(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockPhotoServiceServer)(nil).Create), arg0, arg1)
}

// Update mocks base method
func (m *MockPhotoServiceServer) Update(arg0 context.Context, arg1 *Photo) (*Empty, error) {
	ret := m.ctrl.Call(m, "Update", arg0, arg1)
	ret0, _ := ret[0].(*Empty)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Update indicates an expected call of Update
func (mr *MockPhotoServiceServerMockRecorder) Update(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockPhotoServiceServer)(nil).Update), arg0, arg1)
}

// Read mocks base method
func (m *MockPhotoServiceServer) Read(arg0 context.Context, arg1 *Id) (*Photo, error) {
	ret := m.ctrl.Call(m, "Read", arg0, arg1)
	ret0, _ := ret[0].(*Photo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Read indicates an expected call of Read
func (mr *MockPhotoServiceServerMockRecorder) Read(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Read", reflect.TypeOf((*MockPhotoServiceServer)(nil).Read), arg0, arg1)
}

// Delete mocks base method
func (m *MockPhotoServiceServer) Delete(arg0 context.Context, arg1 *Id) (*Empty, error) {
	ret := m.ctrl.Call(m, "Delete", arg0, arg1)
	ret0, _ := ret[0].(*Empty)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Delete indicates an expected call of Delete
func (mr *MockPhotoServiceServerMockRecorder) Delete(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockPhotoServiceServer)(nil).Delete), arg0, arg1)
}
